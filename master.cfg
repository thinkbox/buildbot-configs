# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

from buildbot.buildslave import BuildSlave
from buildbot.libvirtbuildslave import LibVirtSlave, Connection

import simplejson as json
c['slaves'] = json.load(open('slaves.json'), object_hook=lambda d: BuildSlave(**d))
c['slavePortnum'] = "tcp:9012"

passwd = json.load(open("passwd.json"))

from buildbot.changes.pb import PBChangeSource
c['change_source'] = [ PBChangeSource() ]

from buildbot.config import BuilderConfig
from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Configure, ShellCommand
from buildbot.steps.shell import Compile
from buildbot.steps.shell import WithProperties, SetProperty
from buildbot.steps.vstudio import VC6
from buildbot.steps.transfer import FileUpload, FileDownload
from buildbot.steps.slave import RemoveDirectory, MakeDirectory

sf_repo = 'git://gemrb.git.sourceforge.net/gitroot/gemrb/gemrb'
git_repo = WithProperties("%(repository:~" + sf_repo + ")s")

from buildbot.changes.gitpoller import GitPoller
git_poller = GitPoller(
                   repourl=sf_repo,
                   pollinterval=60*15, # seconds
		   workdir="git-cache",
		   project = "gemrb"
)
c['change_source'] += [ git_poller ]

def doStepTest(useTest, property):
	def test(step):
		try:
			return step.getProperty(property)
		except:
			return False
	return test if useTest else True

def CMakeConfigure(cxx=None, incremental=False, extra_configure=[]):
	if cxx:
		extra_configure = ["-DCMAKE_CXX_COMPILER=%s" % cxx] + extra_configure
	command = ["cmake", "..", "-DDISABLE_WERROR=Yes"]  + extra_configure
	return Configure(workdir="build/build", command=command, doStepIf = doStepTest(incremental, "rebuild"))
def Autoreconf(incremental):
	return ShellCommand(name='autoreconf', description='autoreconf', command=['autoreconf','-i'], doStepIf = doStepTest(incremental, "rebuild"))
def AutotoolsConfigure(cxx, incremental):
	return Configure(env={'CXX': cxx}, command=["./configure", "CXX=%s" % cxx, '--disable-werror'], doStepIf = doStepTest(incremental, "rebuild"))

def gitCheckout():
	return Git(repourl=git_repo, mode="full")
def gitClean(incremental=False):
	return ShellCommand(name="clean", description='clean', command=['git', 'clean', '-Xfd'], doStepIf = doStepTest(incremental, "rebuild"))

def gitDescribe():
	return SetProperty(command=["git", "describe", "--tags", "--dirty=-patched"], property="version")

def testMinimal(workdir, cfg = 'gemrb.cfg', exe = 'gemrb/gemrb', usePTY=False, valgrind=False):
	command=[exe, '-c', cfg]
	logfiles={}
	if valgrind:
		command = [ "valgrind", WithProperties("--suppressions=%(workdir)s/build/testing/python.supp"), "--read-var-info=yes", "--track-origins=yes", "--log-file=valgrind.log"] + command
		logfiles["valgrind"] = "valgrind.log"
	return ShellCommand(name='minimal test', description='boot test', usePTY=usePTY, workdir=workdir, command=command, logfiles=logfiles , env={'SDL_VIDEODRIVER':'dummy'})

class win32DelTree(RemoveDirectory):

	def __init__(self, dir):
		self.description = "clean " + dir
		self.name = "clean " + dir
		RemoveDirectory.__init__(self, dir=dir)

unixDelTree = win32DelTree

from sftp import SFTPUploadPassthrough
import os

class UploadBinary(SFTPUploadPassthrough):
	renderables = [ 'file' ]
	def __init__(self, file,
			remotedir='/home/frs/project/g/ge/gemrb/Buildbot Binaries/',
			url='http://master.dl.sourceforge.net/project/gemrb/Buildbot Binaries/',
			**kwargs):
		kwargs['slavesrc']=WithProperties(file)
		kwargs['remotedest']=remotedestr=WithProperties(os.path.join(remotedir, file))
		kwargs['user']='gembot,gemrb'
		kwargs['host']="frs.sourceforge.net"
		kwargs['key']="gembot-ssh-key"
		SFTPUploadPassthrough.__init__(self, **kwargs)
		self.addFactoryArguments(file=file, remotedir=remotedir, url=url)
		self.file = WithProperties(file)
		self.url_base = url
	def finished(self, results):
		url = self.url_base + self.file
		self.addURL("binary", url)
		SFTPUploadPassthrough.finished(self, results)

import re
class GemRBBuild(BuildFactory):
	def __init__(self, cxx="g++", incremental=False, config="cmake", extra_configure=[], test="gemrb/gemrb", valgrind=True):
		BuildFactory.__init__(self)
		self.addStep(gitCheckout())
		self.addStep(gitDescribe())
		if re.match(r"g\+\+-4\.6\..*", cxx):
			test = None
		if config=="cmake":
			self.addStep(unixDelTree("build/build"))
			self.addStep(CMakeConfigure(cxx, incremental=incremental, extra_configure=extra_configure))
			self.addStep(Compile(workdir="build/build", command=['make','-k','VERBOSE=1']))
			if test:
				self.addStep(ShellCommand(workdir='build/build', command=['rm', '-f', 'valgrind.log']))
				self.addStep(testMinimal(workdir='build/build', exe=test, cfg='../gemrb/GemRB.cfg.noinstall.sample', valgrind=valgrind))
		else:
			self.addStep(Autoreconf(incremental=incremental))
			self.addStep(AutotoolsConfigure(cxx, incremental=incremental))
			self.addStep(Compile(command=['make','-k']))
			if test:
				self.addStep(ShellCommand(command=['gemrb/plugins-prepare.sh']))
				self.addStep(FileDownload(mastersrc='GemRB.autotools.cfg', slavedest='gemrb.cfg'))
				self.addStep(ShellCommand(command=['rm', '-f', 'valgrind.log']))
				self.addStep(testMinimal(workdir='build', exe=test, valgrind=valgrind))

compilers = [('g++-4.4', '.6'), ('g++-4.5', '.3'), ('g++-4.2', '.4'), ('clang++', ''), ('g++-4.6', '.2')]

cross_compilers = { 'i686-pc-linux-gnu': ['i686-pc-linux-gnu-g++']}

c['builders'] = []
builderNames = []

class MSVCFactory(BuildFactory):
	def __init__(self, cmake_config, bbot_builder):
		BuildFactory.__init__(self)
		self.addStep(gitCheckout())
		self.addStep(gitDescribe())
		self.addStep(win32DelTree("build/build"))
		self.addStep(win32DelTree("install"))
		self.addStep(FileDownload(workdir='build', mastersrc='win32-dist-install.cmake', slavedest='win32-dist-install.cmake'))
		self.addStep(CMakeConfigure(extra_configure=[
			'-G', cmake_config,
			'-DCMAKE_VERBOSE_MAKEFILE=Yes',
			WithProperties(r'-DCMAKE_INSTALL_PREFIX=%(workdir)s/install'),
			'-DCMAKE_USER_MAKE_RULES_OVERRIDE=win32-dist-install.cmake',
			'-DWIN32_USE_STDIO=Yes',
		]))
		self.addStep(bbot_builder(workdir=r"build\build", projectfile='gemrb.dsw', project='INSTALL', config='Win32 Debug', mode='build', haltOnFailure=True))
		self.addStep(FileDownload(workdir="install", mastersrc='GemRB.msvc++6.cfg', slavedest='gemrb.cfg'))
		self.addStep(MakeDirectory(WithProperties('install/Cache')))
		self.addStep(testMinimal(workdir="install", exe="gemrb.exe", usePTY=True))
		#self.addStep(ShellCommand(name="zip install", description="zip", workdir='',
		#	command=['zip', '-r', WithProperties('msvc6.zip'), 'install']))
		#self.addStep(UploadBinary(workdir="", file="msvc6.zip"))

class NMakeFactory(BuildFactory):
	def __init__(self, extra_version = ""):
		BuildFactory.__init__(self)
		self.addStep(gitCheckout())
		self.addStep(gitDescribe())
		self.addStep(win32DelTree("build/build"))
		self.addStep(win32DelTree("install"))
		self.addStep(FileDownload(workdir='build', mastersrc='win32-dist-install.cmake', slavedest='win32-dist-install.cmake'))
		self.addStep(CMakeConfigure(extra_configure=[
			'-G', 'NMake Makefiles',
			'-DCMAKE_VERBOSE_MAKEFILE=Yes',
			WithProperties('-DCMAKE_INSTALL_PREFIX=C:/Program Files/GemRB-%(version)s'),
			'-DCMAKE_USER_MAKE_RULES_OVERRIDE=win32-dist-install.cmake',
			'-DWIN32_USE_STDIO=Yes',
			]))
		self.addStep(Compile(workdir="build/build", command=['nmake', '-k']))
		self.addStep(ShellCommand(workdir="build/build", name="install", description="install", command=['nmake', 'DESTDIR=../../install', 'install']))
		self.addStep(FileDownload(workdir=WithProperties('install/Program Files/GemRB-%(version)s'), mastersrc='GemRB.msvc++6.cfg', slavedest='gemrb.cfg'))
		self.addStep(MakeDirectory(WithProperties('install/Program Files/GemRB-%(version)s/Cache')))
		self.addStep(ShellCommand(command="dir", workdir=WithProperties('install/Program Files/GemRB-%(version)s/')))
		self.addStep(testMinimal(WithProperties('install/Program Files/GemRB-%(version)s'), exe="gemrb.exe"))
		zip_name = 'GemRB-nmake-' + extra_version + '%(version)s.zip'
		self.addStep(ShellCommand(name="zip install", description="zip", workdir='install/Program Files/',
			command=['zip', '-r', WithProperties(zip_name), WithProperties('GemRB-%(version)s')]))
		self.addStep(UploadBinary(workdir="install/Program Files/", file=zip_name))

win32env = {
	'OPENALDIR': 'C:/Program Files/OpenAL 1.1 SDK/',
	'SDLDIR': 'C:/Program Files/SDL-1.2.14/',
	'SDLTTFDIR': 'C:/Program Files/SDL_ttf-2.0.10/',
	'SDLMIXERDIR': 'C:/Program Files/SDL_mixer-1.2.11/',
}
c['builders'].append({
	'name': 'msvc++6',
	'slavename': 'bartpe',
	'builddir': 'msvc++6',
	'category': 'win32',
	'env': win32env,
	'factory': MSVCFactory('Visual Studio 6', VC6),
	})
builderNames.append('msvc++6')

#ShellCommand(command=["C:\\Program Files\\Microsoft Visual Studio 10.0\\VC\\bin\\vcvars32.bat"])
vcvars6_env = {
	'VS60COMNTOOLS': 'c:\\progra~1\\Micros~2\\vc98\\bin',
	'INCLUDE': r'C:\PROGRA~1\MICROS~2\VC98\ATL\INCLUDE;C:\PROGRA~1\MICROS~2\VC98\INCLUDE;C:\PROGRA~1\MICROS~2\VC98\MFC\INCLUDE;',
	'LIB': r'C:\PROGRA~1\MICROS~2\VC98\LIB;C:\PROGRA~1\MICROS~2\VC98\MFC\LIB;',
	'MSDevDir': r'C:\PROGRA~1\MICROS~2\Common\msdev98',
	'MSVCDir': r'C:\PROGRA~1\MICROS~2\VC98',
	'PATH': r'C:\PROGRA~1\MICROS~2\Common\msdev98\BIN;C:\PROGRA~1\MICROS~2\VC98\BIN;C:\PROGRA~1\MICROS~2\Common\TOOLS\WINNT;C:\PROGRA~1\MICROS~2\Common\TOOLS;${PATH}',
}
vcvars6_env.update(win32env)
c['builders'].append({
	'name': 'nmake-msvc++6',
	'slavename': 'bartpe',
	'builddir': 'nmake-msvc++6',
	'category': 'win32',
	'env': vcvars6_env,
	'factory': NMakeFactory(),
	})
builderNames.append('nmake-msvc++6')

vcvars10_env = {
	'VS100COMNTOOLS': r"C:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools ",
	'INCLUDE': r"C:\Program Files\Microsoft Visual Studio 10.0\VC\INCLUDE;C:\Program Files\Microsoft SDKs\Windows\v7.0A\include;",
	'LIB': r'C:\Program Files\Microsoft Visual Studio 10.0\VC\LIB;C:\Program Files\Microsoft SDKs\Windows\v7.0A\lib;',
	'LIBPATH': r'C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319;C:\WINDOWS\Microsoft.NET\Framework\v3.5;C:\Program Files\Microsoft Visual Studio 10.0\VC\LIB;',
	'PATH': r'C:\Program Files\Microsoft Visual Studio 10.0\Common7\IDE\;C:\Program Files\Microsoft Visual Studio 10.0\VC\BIN;C:\Program Files\Microsoft Visual Studio 10.0\Common7\Tools;C:\WINDOWS\Microsoft.NET\Framework\v4.0.30319;C:\WINDOWS\Microsoft.NET\Framework\v3.5;C:\Program Files\Microsoft Visual Studio 10.0\VC\VCPackages;C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin\NETFX 4.0 Tools;C:\Program Files\Microsoft SDKs\Windows\v7.0A\bin;${PATH}'
}
vcvars10_env.update(win32env)
c['builders'].append({
	'name': 'nmake-msvc++10',
	'slavename': 'bartpe',
	'builddir': 'nmake-msvc++10',
	'category': 'win32',
	'env': vcvars10_env,
	'factory': NMakeFactory(extra_version="vc10-"),
	})
builderNames.append('nmake-msvc++10')

c['builders'].append(BuilderConfig(
	name = 'mingw32',
	slavename = 'bartpe',
	category = 'win32',
	properties = {'version': 'v0.6.1'},
	env = dict(win32env, **{'PATH': 'c:/mingw32/bin;${PATH}'}),
	factory = BuildFactory([
		gitCheckout(),
		gitDescribe(),
		win32DelTree("build/build"),
		win32DelTree("install"),
		FileDownload(workdir='build', mastersrc='win32-dist-install.cmake', slavedest='win32-dist-install.cmake'),
		CMakeConfigure(extra_configure=[
			'-G', 'MinGW Makefiles',
			'-DCMAKE_VERBOSE_MAKEFILE=Yes',
			WithProperties('-DCMAKE_INSTALL_PREFIX=C:/Program Files/GemRB-%(version)s'),
			'-DCMAKE_USER_MAKE_RULES_OVERRIDE=win32-dist-install.cmake',
			'-DWIN32_USE_STDIO=Yes',
			'-DCMAKE_BUILD_TYPE=Release',
			]),
		Compile(workdir="build/build", command=['mingw32-make', '-k']),
		ShellCommand(workdir="build/build", name="install", description="install", command=['mingw32-make', 'DESTDIR=../../install', 'install']),
		FileDownload(workdir=WithProperties('install/Program Files/GemRB-%(version)s'), mastersrc='GemRB.msvc++6.cfg', slavedest='gemrb.cfg'),
		MakeDirectory(WithProperties('install/Program Files/GemRB-%(version)s/Cache')),
		ShellCommand(command="dir", workdir=WithProperties('install/Program Files/GemRB-%(version)s/')),
		testMinimal(WithProperties('install/Program Files/GemRB-%(version)s'), exe="gemrb.exe"),
		ShellCommand(name="zip install", description="zip", workdir='install/Program Files/',
			command=['zip', '-r', WithProperties('GemRB-win32-%(version)s.zip'), WithProperties('GemRB-%(version)s')]),
		UploadBinary(workdir="install/Program Files/", file="GemRB-win32-%(version)s.zip"),
		])))
builderNames.append('mingw32')

for compiler in compilers:
	for config in ["cmake", "autotools"]:
		for incremental in [False]:
			name = [config, compiler[0]]
			if incremental:
				name += ["incremental"]
			c['builders'].append({
					'name': " ".join(name),
					'slavename': 'socrates',
					'builddir': "-".join(name),
					'category': config,
					'factory': GemRBBuild(cxx="".join(compiler), config=config, incremental=incremental)
					})
			builderNames.append(" ".join(name))

c['builders'].append({
	'name': 'osx-test',
	'slavename': 'mr.mac',
	'builddir': 'osx-test',
	'category': 'osx',
	'factory': GemRBBuild(test="gemrb/gemrb.app/Contents/MacOS/gemrb", valgrind=True),
	})
builderNames.append('osx-test')

c['builders'].append({
	'name': 'osx-xcode-binary',
	'slavename': 'mr.mac',
	'builddir': 'osx-xcode-binary',
	'category': 'osx',
	'factory': BuildFactory([
		gitCheckout(),
		gitDescribe(),
		Compile(workdir="build", command=['xcodebuild', '-project', 'apple/GemRB.xcodeproj', '-target', 'ReleasePackage', '-configuration', 'Release']),
		UploadBinary(workdir="build/apple/ios", file="GemRB-ios-%(version)s.ipa"),
		UploadBinary(workdir="build/apple/osx", file="GemRB-osx-%(version)s.pkg"),
		])
	})
builderNames.append('osx-xcode-binary')

from buildbot.scheduler import AnyBranchScheduler
from buildbot.scheduler import Try_Userpass
from buildbot.schedulers import forcesched
c['schedulers'] = []
c['schedulers'].append(AnyBranchScheduler(name="all",
                                 treeStableTimer=30,
                                 builderNames=builderNames))
c['schedulers'].append(Try_Userpass("try", builderNames,
		port=9011, userpass= passwd['try']['users'] ))
c['schedulers'].append(forcesched.ForceScheduler(name="force",
			repository=forcesched.StringParameter(name="repository", default=sf_repo),
			branch=forcesched.StringParameter(name="branch", default="master"),
			project=forcesched.StringParameter(name="project", default="gemrb"),
			properties=[],
			builderNames=builderNames))


c['status'] = []
from buildbot.status import html
from buildbot.status.web import auth, authz
c['status'].append(html.WebStatus(http_port="tcp:9010:interface=127.0.0.1",
	authz=authz.Authz(True),
	order_console_by_time=True,
	))
c['status'].append(html.WebStatus(http_port="tcp:4010",
	order_console_by_time=True,
	change_hook_dialects={'base': True, 'github': True },
	))
from buildbot.status import words
c['status'].append(words.IRC("irc.freenode.net", passwd['irc']['user'],
		channels=["#gemrb"],
		password=passwd['irc']['password'],
		useSSL=True, port=6697,
		notify_events={
		'exception': 1,
		'successToFailure': 1,
		'failureToSuccess': 1,
		}))

from buildbot.manhole import AuthorizedKeysManhole
c['manhole'] = AuthorizedKeysManhole(9090, 'authorized_keys')
c['projectName'] = "GemRB"
c['projectURL'] = "http://www.gemrb.org"
c['buildbotURL'] = "http://buildbot.gemrb.org/"
