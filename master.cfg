# -*- python -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.
from buildbot.buildslave import BuildSlave
import simplejson as json
c['slaves'] = json.load(open('slaves.json'), object_hook=lambda d: BuildSlave(**d))

passwd = json.load(open("passwd.json"))

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 7098

####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we point to the buildbot clone of pyflakes.

git_dir = "git://notmuchmail.org/git/notmuch"

from buildbot.changes.gitpoller import GitPoller
c['change_source'] = []
c['change_source'].append(GitPoller(
        git_dir,
        workdir='gitpoller-workdir', branch='master',
        pollinterval=300))
c['change_source'].append(GitPoller(
        git_dir,
        workdir='release-poller', branch='release',
        pollinterval=300))

####### SCHEDULERS

from buildbot.schedulers.basic import SingleBranchScheduler
from buildbot.changes import filter
c['schedulers'] = []
c['schedulers'].append(SingleBranchScheduler(
                            name="master",
                            change_filter=filter.ChangeFilter(branch='master'),
                            treeStableTimer=None,
                            builderNames=["master", "master-emacs24"]))
c['schedulers'].append(SingleBranchScheduler(
                            name="release",
                            change_filter=filter.ChangeFilter(branch='release'),
                            treeStableTimer=None,
                            builderNames=["release", "release-emacs24"]))

####### BUILDERS

# The 'builders' list defines the Builders, which tell Buildbot how to perform a build:
# what steps, and which slaves can execute them.  Note that any particular build will
# only take place on one slave.

from buildbot.process.factory import BuildFactory
from buildbot.steps.source.git import Git
from buildbot.steps.shell import Configure, Compile, Test
from buildbot.process.properties import Property
from notmuch_test import NotmuchTest

class Factory(BuildFactory):
    def __init__(self, branch, emacs=None):
        BuildFactory.__init__(self)
        # check out the source
        self.addStep(Git(repourl=Property("repository"), branch=branch, mode='full'))
        self.addStep(Configure())
        compile_command = [ 'make', 'V=1' ]
        if emacs:
            compile_command += [ 'EMACS=' + emacs + ' --quick' ]
        self.addStep(Compile(command=compile_command))
        self.addStep(NotmuchTest(emacs=emacs))

from buildbot.config import BuilderConfig

c['builders'] = []
c['builders'].append(
    BuilderConfig(name="master",
      slavenames=["socrates"],
      properties={'repository': git_dir},
      factory=Factory(branch = "master")))
c['builders'].append(
    BuilderConfig(name="release",
      slavenames=["socrates"],
      properties={'repository': git_dir},
      factory=Factory(branch = "release")))
c['builders'].append(
    BuilderConfig(name="master-emacs24",
      slavenames=["socrates"],
      properties={'repository': git_dir},
      factory=Factory(branch = "master", emacs="emacs-24")))
c['builders'].append(
    BuilderConfig(name="release-emacs24",
      slavenames=["socrates"],
      properties={'repository': git_dir},
      factory=Factory(branch = "release", emacs="emacs-24")))

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

import re
revlink_urls = {
        'git://notmuchmail.org/git/notmuch': 'http://git.notmuchmail.org/git/notmuch/commit/%s'
}
def revlink(rev, repo):
    for k, v in revlink_urls.iteritems():
        m = re.match(k, repo)
        if m:
            return m.expand(v) % rev


from buildbot.status import html
from buildbot.status.web import authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = False,
    forceBuild = True, # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=7010, authz=authz.Authz(False),
    revlink = revlink,
    order_console_by_time=True))

from buildbot.status import words
c['status'].append(words.IRC("irc.freenode.net", passwd['irc']['user'],
        channels=["#notmuch"],
        password=passwd['irc']['password'],
        useSSL=True, port=6697,
        notify_events={
                'exception': 1,
                'successToFailure': 1,
                'failureToSuccess': 1,
        }))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "notmuch"
c['titleURL'] = "http://notmuchmail.org/"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://notmuch.hocat.ca/"

####### DB URL

# This specifies what database buildbot uses to store change and scheduler
# state.  You can leave this at its default for all but the largest
# installations.
c['db_url'] = "sqlite:///state.sqlite"

