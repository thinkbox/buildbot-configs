# -*- python -*-
# ex: set syntax=python:

from twisted.python import log

c = BuildmasterConfig = {}
c['projectName'] = "Coq"
c['projectURL'] = "http://coq.inria.org/"
c['buildbotURL'] = "http://coq.hocat.ca/buildbot/"

c['db_url'] = "sqlite:///state.sqlite"
c['slavePortnum'] = "tcp:7012"

from buildbot.buildslave import BuildSlave
import simplejson as json
c['slaves'] = json.load(open('slaves.json'), object_hook=lambda d: BuildSlave(**d))

passwd = json.load(open("passwd.json"))

from buildbot.changes.pb import PBChangeSource
c['change_source'] = [ PBChangeSource() ]

coq_inria_url='git://scm.gforge.inria.fr/coq/coq-svn.git'
rk_mathclasses_url = "git://github.com/robbertkrebbers/math-classes.git"
tp_mathclasses_url = "git://github.com/tomprince/math-classes.git"
tp_rippling_url = "git://github.com/tomprince/rippling.git"
tp_coq_url = "git://github.com/tomprince/coq.git"

import re
revlink_urls = {
	'git://scm.gforge.inria.fr/(.*)': 'https://gforge.inria.fr/plugins/scmgit/cgi-bin/gitweb.cgi?p=\\1;a=commit;h=%s',
	'git://github.com/([^/]*)/([^/]*?)(?:\.git)?$': 'https://github.com/\\1/\\2/commits/%s',
	}
def revlink(rev, repo):
	for k, v in revlink_urls.iteritems():
		m = re.match(k, repo)
		if m:
			return m.expand(v) % rev

from buildbot.changes.gitpoller import GitPoller
inria_poller = GitPoller(
                   repourl=coq_inria_url,
                   pollinterval=60*15, # seconds
		   workdir="git-cache",
		   project = "coq",
		   branch = "trunk"
)
inria_v83_poller = GitPoller(
                   repourl=coq_inria_url,
                   pollinterval=60*15, # seconds
		   workdir="git-cache",
		   project = "coq",
		   branch = "v8.3"
)
rk_poller = GitPoller(
                   repourl=rk_mathclasses_url,
                   pollinterval=60*15, # seconds
		   workdir="mc-cache",
		   project = "math-classes"
)
c['change_source'] += [ inria_poller, rk_poller, inria_v83_poller ]

####### SCHEDULERS

## configure the Schedulers

from buildbot.schedulers.basic import AnyBranchScheduler, SingleBranchScheduler
from buildbot.schedulers.triggerable import Triggerable
from buildbot.schedulers.filter import ChangeFilter
from buildbot.schedulers.trysched import Try_Userpass
from buildbot.schedulers.timed import Periodic

c['schedulers'] = [
	AnyBranchScheduler(name="coq",
			treeStableTimer=60,
			change_filter = ChangeFilter(project='coq', repository_re='.*/github.com/.*'),
			builderNames=["build-coq", "ocamlbuild"]),
	SingleBranchScheduler(name="coq-trunk",
			treeStableTimer=60,
			change_filter = ChangeFilter(branch = "trunk", project = 'coq', repository=coq_inria_url),
			builderNames=["build-coq", "ocamlbuild"]),
	AnyBranchScheduler(name="math-classes",
			treeStableTimer=60,
			change_filter = ChangeFilter(branch = "master", project = "math-classes"),
			builderNames=["math-classes"]),
	Triggerable(name="build-dependents",
			builderNames=["math-classes", "rippling"]),
	Triggerable(name="build-coq-version",
			builderNames=["build-coq"]),
	Try_Userpass("try", ["math-classes", "rippling", 'build-coq', "ocamlbuild"],
			port=7011, userpass=passwd['try']['users']),
	Periodic(name="clean-binaries",
			builderNames=["clean-binaries"],
			periodicBuildTimer=24*60*60),
	]


from buildbot.process import factory
from buildbot.steps.shell import ShellCommand
from buildbot.steps.trigger import Trigger, CopyChanges
from buildbot.process.properties import WithProperties, Property

from buildbot.steps.source.git import Git
from buildbot.steps.transfer import FileUpload, FileDownload
from buildbot.steps.master import MasterShellCommand
from buildbot.steps.shell import Compile, Configure, Test
from buildbot.steps.slave import RemoveDirectory
from buildbot.steps.subunit import SubunitShellCommand

def repo(url):
	return Property("repository", url)

class GitClean(ShellCommand):
	description = "cleaning"
	descriptionDone = "clean"
	name = "clean"
	def __init__(self, command=None, **kwargs):
		ShellCommand.__init__(self, command=['git', 'clean', '-xfd'], **kwargs)

from steps import FileExists
class EnsureCoqVersion(Trigger):
	description = "building coq"
	descriptionDone = "build coq"
	name = "ensure-coq"
	haltOnFailure=True
	def doStepIf(self, step):
		revision = self.build.getProperties().getProperty("coq_revision")
		if revision:
			tarfile = "../binaries/coq-%s.tar.gz" % revision
			log.msg(tarfile)
			d = FileExists(self, tarfile)
			d.addCallback(lambda res: not res)
			return d
		else:
			return False
	def __init__(self, **kwargs):
		kwargs['waitForFinish'] = True
		kwargs['schedulerNames'] = ['build-coq-version']
		kwargs['sourceStamp'] = {
			'branch': 'patches',
			'repository': tp_coq_url,
			'revision': Property("coq_revision"),
			'project': 'coq'
		}
		Trigger.__init__(self, **kwargs)

class ExtractCoq(ShellCommand):
	description = "extracting coq"
	descriptionDone = "extract coq"
	name = "extract-coq"
	tarfile = WithProperties("../binaries/coq-%(coq_revision:~latest)s.tar.gz")
	def __init__(self, **kwargs):
		kwargs['workdir'] = "."
		kwargs['command'] = ["tar", "xvzf", self.tarfile]
		ShellCommand.__init__(self, **kwargs)

class UploadBinary(FileUpload):
	renderables = ['file']
	def __init__(self, file, **kwargs):
		kwargs['slavesrc']=WithProperties(file)
		kwargs['masterdest']=masterdest=WithProperties('public_html/binaries/' + file)
		FileUpload.__init__(self, **kwargs)
		self.addFactoryArguments(file=file)
		self.file=file
	def finished(self, results):
		url = "/binaries/" + self.file
		self.addURL("binary", url)
		FileUpload.finished(self, results)

def BuildCoq():
	f = factory.BuildFactory()
	f.addStep(Git(repourl=repo(coq_inria_url), branch="trunk", mode="full"))
	f.addStep(Configure(command=['./configure', '-prefix', '/var/empty']))
	f.addStep(Compile(command=['make', 'world']))
	f.addStep(RemoveDirectory(dir="install"))
	f.addStep(ShellCommand(name="install", command=['make', 'install', 'COQINSTALLPREFIX=../install/coq', 'OLDROOT=/var/empty']))
	tarfile = WithProperties("%(workdir)s/../binaries/coq-%(got_revision)s.tar.gz")
	f.addStep(ShellCommand(name="zip", description="zip", workdir="install", command=['tar', 'czvf', tarfile, 'coq']))
	f.addStep(ShellCommand(workdir="../binaries", command=['ln','-f',tarfile,"coq-latest.tar.gz"]))
	f.addStep(Trigger(doStepIf=lambda step: not re.match("Triggerable", step.build.reason), waitForFinish=False, schedulerNames=['build-dependents'], set_properties={'coq_revision': Property("got_revision")},
		sourceStamp = {
			'branch': None,
			'revision': None,
			'repository': '',
			'project': '',
			'changeids': CopyChanges()
		}))
	f.addStep(Trigger(doStepIf=lambda step: not re.match("Triggerable", step.build.reason), waitForFinish=False, schedulerNames=['build-dependents'], alwaysUseLatest=True, set_properties={'coq_revision': Property("got_revision")}))
	f.addStep(ShellCommand(command=['make', 'test-suite']))
	f.addStep(FileDownload(mastersrc="test-parse.py", slavedest="test-parse.py", workdir="build/test-suite"))
	f.addStep(SubunitShellCommand(workdir="build/test-suite", command=['python', 'test-parse.py']))
	f.addStep(Test(name="coqchk",
				description = "checking", descriptionDone = "check",
				timeout=None,
				command=['/usr/bin/time', 'make', 'VALIDOPTS=-o -m', 'validate']))
	return f

def CoqOCamlBuild():
	f = factory.BuildFactory()
	f.addStep(Git(repourl=repo(coq_inria_url), branch="trunk", mode="full"))
	f.addStep(Configure(command=['./configure', '-usecamlp4', '-prefix', '../install']))
	f.addStep(Compile(command=['./build']))
	f.addStep(ShellCommand(name='test-suite', workdir='build/test-suite', command=['make','run']))
	f.addStep(FileDownload(mastersrc="test-parse.py", slavedest="test-parse.py", workdir="build/test-suite"))
	f.addStep(SubunitShellCommand(workdir="build/test-suite", command=['python', 'test-parse.py']))
	return f

def BuildMathClasses():
	f = factory.BuildFactory()
	f.addStep(EnsureCoqVersion())
	f.addStep(ExtractCoq())
	f.addStep(Git(repourl=repo(rk_mathclasses_url), mode="full"))
	f.addStep(Compile(workdir="build/src", command=['scons', '-k']))
	return f

def BuildRippling():
	f = factory.BuildFactory()
	f.addStep(EnsureCoqVersion())
	f.addStep(ExtractCoq())
	f.addStep(Git(repourl=repo(tp_rippling_url), mode="full", branch="trunk"))
	f.addStep(ShellCommand(command=['coq_makefile', '-f', 'Make', '-o', 'Makefile']))
	f.addStep(Compile())
	return f

def CleanBinaries():
	f = factory.BuildFactory()
	f.addStep(ShellCommand(workdir='.', command=['find', '!', '-name', '*-latest.tar.gz', '-type', 'f', '-ctime', '+7', '-print', '-delete']))
	return f

from buildbot.config import BuilderConfig

c['builders'] = [
	BuilderConfig(name="build-coq",
		slavename="socrates",
		factory=BuildCoq()),
	BuilderConfig(name="ocamlbuild",
		slavename="socrates",
		factory=CoqOCamlBuild()),
	BuilderConfig(name="rippling",
		slavename="socrates",
		env = {'PATH': WithProperties('%(workdir)s/coq/bin:${PATH}')},
		factory=BuildRippling()),
	BuilderConfig(name="math-classes",
		slavename="socrates",
		env = {'PATH': WithProperties('%(workdir)s/coq/bin:${PATH}')},
		factory=BuildMathClasses()),
	BuilderConfig(name="clean-binaries",
		slavename="socrates",
		slavebuilddir='binaries',
		factory=CleanBinaries()),
	]


c['status'] = []

from buildbot.status import html
from buildbot.status.web import auth, authz
authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    gracefulShutdown = True,
    forceBuild = True,
    forceAllBuilds = True,
    pingBuilder = True,
    stopBuild = True,
    stopAllBuilds = True,
    cancelPendingBuild = True,
)
c['status'].append(html.WebStatus(http_port="tcp:7010:interface=127.0.0.1",
			authz=authz_cfg,
			revlink=revlink,
			order_console_by_time=True))
c['status'].append(html.WebStatus(http_port="tcp:7005:interface=127.0.0.1",
			order_console_by_time=True,
			revlink=revlink,
			change_hook_dialects={'base': True, 'github': True },
			))
from buildbot.status import words
c['status'].append(words.IRC("irc.freenode.net", passwd['irc']['user'],
		channels=["tomprince"],
		password=passwd['irc']['password'],
		useSSL=True, port=6697,
		notify_events={
		'started': 1,
		'finished': 1,
		}))

from buildbot.manhole import AuthorizedKeysManhole
c['manhole'] = AuthorizedKeysManhole(7090, '/home/cougar/.ssh/authorized_keys')
